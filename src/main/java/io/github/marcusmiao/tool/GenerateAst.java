package io.github.marcusmiao.tool;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.List;

public class GenerateAst {

  public static void main(String[] args) throws IOException {
    if (args.length != 1) {
      System.err.println("Usage: generate_ast <output directory>");
      System.exit(64);
    }
    String outputDirectory = args[0];
    defineAst(outputDirectory, "Expr", Arrays.asList(
        "Binary   : Expr left, Token operator, Expr right",
        "Grouping : Expr expression",
        "Literal  : Object value",
        "Unary    : Token operator, Expr right"
    ));
  }

  private static void defineAst(String outputDirectory, String baseName, List<String> types)
      throws IOException {
    String path = outputDirectory + "/" + baseName + ".java";
    File file = new File(path);
    if (file.exists()) {
      boolean status = file.delete();
      if (!status) {
        throw new IOException("Failed to delete " + path);
      }
    }
    PrintWriter writer = new PrintWriter(path, "UTF-8");

    writer.println("// This file is generated by GenerateAst.java");
    writer.println("package io.github.marcusmiao.lox;");
    writer.println();
    writer.println("import java.util.List;");
    writer.println();
    writer.println("abstract class " + baseName + " {");

    defineVisitor(writer, baseName, types);

    for (String type : types) {
      String className = type.split(":")[0].trim();
      String fields = type.split(":")[1].trim();
      defineType(writer, baseName, className, fields);
    }

    writer.println();
    writer.println("  abstract <R> R accept(Visitor<R> visitor);");

    writer.println("}");
    writer.close();
  }

  private static void defineType(PrintWriter writer, String baseName, String className,
      String fieldList) throws IOException {
    writer.println("  static class " + className + " extends " + baseName + " {");
    writer.println("    " + className + "(" + fieldList + ") {");
    String[] fields = fieldList.split(",");
    for (String field : fields) {
      String name = field.trim().split(" ")[1];
      writer.println("      this." + name + " = " + name + ";");
    }
    writer.println("    }");

    writer.println();
    writer.println("    @Override");
    writer.println("    <R> R accept(Visitor<R> visitor) {");
    writer.println("        return visitor.visit" + className + baseName + "(this);");
    writer.println("    }");

    writer.println();
    for (String field : fields) {
      writer.println("    final " + field.trim() + ";");
    }
    writer.println("  }");
  }

  private static void defineVisitor(PrintWriter writer, String baseName, List<String> types) {
    writer.println("  interface Visitor<R> {");
    for (String type : types) {
      String typeName = type.split(":")[0].trim();
      writer.println(
          "    R visit" + typeName + baseName + "("
              + typeName + " " + baseName.toLowerCase() + ");");
    }
    writer.println("  }");
  }
}
